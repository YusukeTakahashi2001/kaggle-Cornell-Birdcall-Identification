hydra:
  run:
    dir: ./data/hydra_outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}/try0
  sweep:
    dir: ./data/hydra_outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: try${hydra.job.num}
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s] line%(lineno)d [%(levelname)s] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    hydra_help: ???
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
  output_subdir: .hydra
  overrides:
    hydra: []
    task:
    - globals.debug=0
    - globals.num_epochs=35
    - globals.folds=[0],[1]
    - dataset.img_size=224,112
  job:
    name: pipeline
    override_dirname: dataset.img_size=224,112,globals.debug=0,globals.folds=[0],[1],globals.num_epochs=35
    id: ???
    num: ???
    config_name: run_config.yaml
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.0.0rc4
    cwd: /home/user/Git/kaggle-Cornell-Birdcall-Identification
  verbose: false
globals:
  debug: 0
  seed: 1213
  device: cuda
  num_epochs: 35
  folds:
  - 0
data:
  train_df_path: data_ignore/external_dataset/32khz/birdsong-resampled-train-audio-01/train_mod.csv
  train_audio_path: data_ignore/external_dataset/32khz
  test_df_path: ./data/external_dataset/birdcall-check/test_audio
  test_audio_path: ./data/external_dataset/birdcall-check/test.csv
split:
  name: StratifiedKFold
  params:
    n_splits: 5
    random_state: 42
    shuffle: true
dataset:
  name: SpectrogramDataset
  img_size: 224
  params:
    n_mels: 128
    fmin: 20
    fmax: 16000
loader:
  train:
    batch_size: 20
    shuffle: true
    num_workers: 2
  valid:
    batch_size: 10
    shuffle: false
    num_workers: 2
model:
  name: ResNet50
  params:
    base_model: resnet50
    pretrained: true
    n_classes: 264
loss:
  name: ResNetLoss
  params:
    loss_type: bce
optimizer:
  name: Adam
  params:
    lr: 0.001
scheduler:
  name: CosineAnnealingLR
  params:
    T_max: 10
